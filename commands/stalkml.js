const axios = require('axios');

async function stalkmlCommand(sock, message, user, args) {
    const from = message.key.remoteJid;
    
    try {
        if (!args || args.length < 2) {
            await sock.sendMessage(from, { 
                text: `❌ Usage: .stalkml <id> <server>

📋 *Available Servers:*
• Advanced Server
• Elite Division  
• Master Tier
• Grandmaster Tier
• Epic Glory
• Legend Glory
• Mythic Honor
• Mythic Glory
• Mythic Immortal

📌 *Example:* .stalkml 123456789 2345

💡 *Note:* ID adalah user ID Mobile Legends, Server adalah kode server game.` 
            });
            return;
        }

        const userId = args[0];
        const serverId = args[1];

        // Send loading message
        await sock.sendMessage(from, { 
            text: '🔍 Sedang mencari informasi player Mobile Legends...' 
        });

        // Call BetaBotz API - try both v1 and v2 endpoints
        let apiUrl = `https://betabotz-api.vercel.app/api/stalk/ml?id=${userId}&server=${serverId}&apikey=babychand`;
        
        let response;
        try {
            // Try v1 endpoint first
            response = await axios.get(apiUrl, {
                timeout: 30000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
        } catch (error) {
            // If v1 fails, try v2 with different format
            if (error.response && error.response.status === 404) {
                console.log('Trying v2 endpoint...');
                apiUrl = `https://betabotz-api.vercel.app/api/stalk/mlbb?id=${userId}&server=${serverId}&apikey=babychand`;
                response = await axios.get(apiUrl, {
                    timeout: 30000,
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }
                });
            } else {
                throw error;
            }
        }

        console.log('API Response:', response.data);

        if (response.data && (response.data.status === true || response.data.success === true)) {
            const data = response.data.result || response.data.data || response.data;
            
            const resultText = `🎮 *MOBILE LEGENDS PLAYER INFO*

👤 *Username:* ${data.username || data.name || data.nickname || 'Not Found'}
🆔 *User ID:* ${userId}
🌐 *Server ID:* ${serverId}

📊 *Rank Information:*
🏆 *Current Rank:* ${data.rank || data.current_rank || data.tier || 'Unknown'}
⭐ *Star:* ${data.star || data.stars || data.point || 'Unknown'}
🎯 *Total Matches:* ${data.total_matches || data.total_match || data.matches || 'Unknown'}
📈 *Win Rate:* ${data.winrate || data.win_rate || data.wr || 'Unknown'}

🏅 *Season Info:*
🗓️ *Season:* ${data.season || data.current_season || 'Unknown'}
🥇 *Highest Rank:* ${data.highest_rank || data.max_rank || data.peak_rank || 'Unknown'}

🎊 *Status:* ${data.status || data.account_status || 'Active'}

⚡ *Generated by SeaBot*`;

            await sock.sendMessage(from, { 
                text: resultText 
            });

        } else {
            await sock.sendMessage(from, { 
                text: `❌ Player tidak ditemukan!

🔍 *Kemungkinan penyebab:*
• User ID atau Server ID salah
• Player belum pernah bermain ranked
• Player menggunakan setting privacy
• Server sedang maintenance

💡 *Tips:* Pastikan ID dan Server benar, coba lagi nanti.` 
            });
        }

    } catch (error) {
        console.error('Error in stalkml command:', error);
        
        let errorMessage = '❌ Gagal mengambil data player!';
        
        if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
            errorMessage = '🌐 Koneksi bermasalah, coba lagi nanti.';
        } else if (error.response && error.response.status === 429) {
            errorMessage = '⏳ API limit tercapai, tunggu beberapa saat.';
        } else if (error.response && error.response.status >= 500) {
            errorMessage = '🔧 Server API sedang bermasalah.';
        }
        
        await sock.sendMessage(from, { 
            text: errorMessage 
        });
    }
}

module.exports = stalkmlCommand;