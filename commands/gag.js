const config = require('../config/bot');

async function gagCommand(sock, message, user, args) {
    const from = message.key.remoteJid;
    
    try {
        // Send loading message
        await sock.sendMessage(from, { 
            text: '🌱 Mengecek stock Grow a Garden...' 
        });

        // Call BetaBotz API for Grow a Garden stock using JavaScript fetch
        const apiUrl = `https://api.betabotz.eu.org/api/webzone/grow-and-garden-stock?apikey=${config.betabotzApiKey}`;
        
        console.log(`Fetching GAG data from: ${apiUrl}`);
        
        // Use native JavaScript fetch like in the documentation
        const response = await fetch(apiUrl)
            .then(r => r.json())
            .catch(console.error);

        console.log('GAG API Response:', JSON.stringify(response, null, 2));

        if (response && response.status === true && response.result) {
            const data = response.result;
            
            let stockText = `🌱 *GROW A GARDEN STOCK*\n\n`;
            
            // Seeds section
            if (data.seeds && data.seeds.items && data.seeds.items.length > 0) {
                stockText += `🌰 *SEEDS:*\n`;
                data.seeds.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.seeds.lastUpdate) {
                    stockText += `📅 Last Update: ${data.seeds.lastUpdate}\n`;
                }
                stockText += `\n`;
            }

            // Gears section
            if (data.gears && data.gears.items && data.gears.items.length > 0) {
                stockText += `⚙️ *GEARS:*\n`;
                data.gears.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.gears.lastUpdate) {
                    stockText += `📅 Last Update: ${data.gears.lastUpdate}\n`;
                }
                stockText += `\n`;
            }

            // Eggs section
            if (data.eggs && data.eggs.items && data.eggs.items.length > 0) {
                stockText += `🥚 *EGGS:*\n`;
                data.eggs.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.eggs.lastUpdate) {
                    stockText += `📅 Last Update: ${data.eggs.lastUpdate}\n`;
                }
                stockText += `\n`;
            }

            // Cosmetic section
            if (data.cosmetic && data.cosmetic.items && data.cosmetic.items.length > 0) {
                stockText += `✨ *COSMETIC:*\n`;
                data.cosmetic.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.cosmetic.lastUpdate) {
                    stockText += `📅 Last Update: ${data.cosmetic.lastUpdate}\n`;
                }
                stockText += `\n`;
            }

            // Summer section
            if (data.summer && data.summer.items && data.summer.items.length > 0) {
                stockText += `☀️ *SUMMER:*\n`;
                data.summer.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.summer.lastUpdate) {
                    stockText += `📅 Last Update: ${data.summer.lastUpdate}\n`;
                }
                stockText += `\n`;
            } else if (data.summer) {
                stockText += `☀️ *SUMMER:*\n• No items available\n\n`;
            }

            // Merchant section
            if (data.merchant && data.merchant.items && data.merchant.items.length > 0) {
                stockText += `🏪 *MERCHANT:*\n`;
                data.merchant.items.forEach(item => {
                    stockText += `• ${item}\n`;
                });
                if (data.merchant.lastUpdate) {
                    stockText += `📅 Last Update: ${data.merchant.lastUpdate}\n`;
                }
                stockText += `\n`;
            }

            stockText += `⚡ *Generated by ${config.botName}*`;

            await sock.sendMessage(from, { 
                text: stockText 
            });

        } else {
            await sock.sendMessage(from, { 
                text: `❌ Gagal mengambil data stock!

🔍 *Kemungkinan penyebab:*
• API sedang maintenance
• Server bermasalah
• Koneksi terputus

💡 *Tips:* Coba lagi dalam beberapa saat.` 
            });
        }

    } catch (error) {
        console.error('Error in gag command:', error);
        
        let errorMessage = '❌ Gagal mengambil data stock Grow a Garden!';
        
        if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
            errorMessage = '🌐 Koneksi bermasalah, coba lagi nanti.';
        } else if (error.response && error.response.status === 429) {
            errorMessage = '⏳ API limit tercapai, tunggu beberapa saat.';
        } else if (error.response && error.response.status >= 500) {
            errorMessage = '🔧 Server API sedang bermasalah, coba lagi nanti.';
        } else if (error.response && error.response.status === 404) {
            errorMessage = '❌ Endpoint API tidak ditemukan.';
        } else if (error.response && error.response.status === 403) {
            errorMessage = '🔒 API key tidak valid atau blocked.';
        }
        
        await sock.sendMessage(from, { 
            text: errorMessage + '\n\nGunakan: .gag' 
        });
    }
}

module.exports = gagCommand;