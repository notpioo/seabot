<%- include('../layout/main') %>

<div class="row">
    <!-- Page Header -->
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-0">Configuration</h1>
                <p class="text-muted">Manage bot settings and configuration</p>
            </div>
            <div>
                <button class="btn btn-outline-warning" onclick="requestRestart()">
                    <i class="fas fa-redo"></i>
                    Request Restart
                </button>
                <button class="btn btn-outline-info" onclick="viewLogs()">
                    <i class="fas fa-file-alt"></i>
                    View Logs
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Configuration Sections -->
<div class="row">
    <!-- Bot Configuration -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-robot text-primary"></i>
                    Bot Configuration
                </h5>
            </div>
            <div class="card-body">
                <form id="botConfigForm">
                    <div class="mb-3">
                        <label for="botName" class="form-label">Bot Name</label>
                        <input type="text" class="form-control" id="botName" value="<%= config.bot.name %>">
                    </div>
                    <div class="mb-3">
                        <label for="botVersion" class="form-label">Version</label>
                        <input type="text" class="form-control" id="botVersion" value="<%= config.bot.version %>">
                    </div>
                    <div class="mb-3">
                        <label for="ownerNumber" class="form-label">Owner Number</label>
                        <input type="text" class="form-control" id="ownerNumber" value="<%= config.bot.ownerNumber %>">
                    </div>
                    <div class="mb-3">
                        <label for="prefixes" class="form-label">Command Prefixes</label>
                        <input type="text" class="form-control" id="prefixes" value="<%= config.bot.prefixes.join(', ') %>">
                        <div class="form-text">Separate multiple prefixes with commas</div>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="saveBotConfig()">
                        <i class="fas fa-save"></i>
                        Save Bot Config
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Logging Configuration -->
    <div class="col-lg-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-file-alt text-info"></i>
                    Logging Configuration
                </h5>
            </div>
            <div class="card-body">
                <form id="loggingConfigForm">
                    <div class="mb-3">
                        <label for="logLevel" class="form-label">Log Level</label>
                        <select class="form-select" id="logLevel">
                            <option value="error" <%= config.logging.level === 'error' ? 'selected' : '' %>>Error</option>
                            <option value="warn" <%= config.logging.level === 'warn' ? 'selected' : '' %>>Warning</option>
                            <option value="info" <%= config.logging.level === 'info' ? 'selected' : '' %>>Info</option>
                            <option value="debug" <%= config.logging.level === 'debug' ? 'selected' : '' %>>Debug</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="enableFileLog" <%= config.logging.enableFileLog ? 'checked' : '' %>>
                            <label class="form-check-label" for="enableFileLog">
                                Enable File Logging
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="enableConsoleLog" <%= config.logging.enableConsoleLog ? 'checked' : '' %>>
                            <label class="form-check-label" for="enableConsoleLog">
                                Enable Console Logging
                            </label>
                        </div>
                    </div>
                    <button type="button" class="btn btn-info" onclick="saveLoggingConfig()">
                        <i class="fas fa-save"></i>
                        Save Logging Config
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- System Information -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-info-circle text-success"></i>
                    System Information
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <h6>Database</h6>
                        <ul class="list-unstyled">
                            <li><small><strong>Database Name:</strong> <%= config.database.name %></small></li>
                            <li><small><strong>Status:</strong> <span class="badge bg-success">Connected</span></small></li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h6>WhatsApp</h6>
                        <ul class="list-unstyled">
                            <li><small><strong>Connection Mode:</strong> <%= config.whatsapp.defaultConnectionMode %></small></li>
                            <li><small><strong>Print QR:</strong> <%= config.whatsapp.printQRInTerminal ? 'Yes' : 'No' %></small></li>
                            <li><small><strong>Max Retries:</strong> <%= config.whatsapp.maxRetries %></small></li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h6>Rate Limiting</h6>
                        <ul class="list-unstyled">
                            <li><small><strong>Max Per Minute:</strong> <%= config.bot.rateLimit.maxPerMinute %></small></li>
                            <li><small><strong>Cooldown:</strong> <%= config.bot.rateLimit.cooldownSeconds %>s</small></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Logs Modal -->
<div class="modal fade" id="logsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Bot Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <button class="btn btn-sm btn-outline-primary" onclick="refreshLogs()">
                        <i class="fas fa-sync-alt"></i>
                        Refresh
                    </button>
                    <select class="form-select form-select-sm d-inline-block w-auto ms-2" id="logLines" onchange="refreshLogs()">
                        <option value="50">Last 50 lines</option>
                        <option value="100" selected>Last 100 lines</option>
                        <option value="200">Last 200 lines</option>
                        <option value="500">Last 500 lines</option>
                    </select>
                </div>
                <div id="logContent" style="background-color: #1e1e1e; color: #d4d4d4; font-family: monospace; padding: 1rem; border-radius: 0.5rem; max-height: 500px; overflow-y: auto;">
                    Loading logs...
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
function saveBotConfig() {
    const prefixesText = document.getElementById('prefixes').value;
    const prefixes = prefixesText.split(',').map(p => p.trim()).filter(p => p);
    
    const configData = {
        name: document.getElementById('botName').value,
        version: document.getElementById('botVersion').value,
        ownerNumber: document.getElementById('ownerNumber').value,
        prefixes: prefixes
    };
    
    fetch('/config/api/config/bot', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(configData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Bot configuration updated successfully');
        } else {
            alert('Failed to update bot configuration: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error updating bot config:', error);
        alert('Failed to update bot configuration');
    });
}

function saveLoggingConfig() {
    const configData = {
        level: document.getElementById('logLevel').value,
        enableFileLog: document.getElementById('enableFileLog').checked,
        enableConsoleLog: document.getElementById('enableConsoleLog').checked
    };
    
    fetch('/config/api/config/logging', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(configData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Logging configuration updated successfully');
        } else {
            alert('Failed to update logging configuration: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error updating logging config:', error);
        alert('Failed to update logging configuration');
    });
}

function requestRestart() {
    if (confirm('Are you sure you want to request a bot restart? The bot may need to be manually restarted.')) {
        fetch('/config/api/restart', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
        })
        .catch(error => {
            console.error('Error requesting restart:', error);
            alert('Failed to request restart');
        });
    }
}

function viewLogs() {
    new bootstrap.Modal(document.getElementById('logsModal')).show();
    refreshLogs();
}

function refreshLogs() {
    const lines = document.getElementById('logLines').value;
    const logContent = document.getElementById('logContent');
    
    logContent.innerHTML = 'Loading logs...';
    
    fetch(`/config/api/logs?lines=${lines}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (data.data.lines.length === 0) {
                    logContent.innerHTML = '<span style="color: #888;">No logs available</span>';
                } else {
                    logContent.innerHTML = data.data.lines.map(line => {
                        // Color code log levels
                        line = line.replace(/\[error\]/g, '<span style="color: #f87171;">[error]</span>');
                        line = line.replace(/\[warn\]/g, '<span style="color: #fbbf24;">[warn]</span>');
                        line = line.replace(/\[info\]/g, '<span style="color: #60a5fa;">[info]</span>');
                        line = line.replace(/\[debug\]/g, '<span style="color: #a78bfa;">[debug]</span>');
                        return line;
                    }).join('\n');
                }
                // Scroll to bottom
                logContent.scrollTop = logContent.scrollHeight;
            } else {
                logContent.innerHTML = '<span style="color: #f87171;">Error loading logs: ' + data.error + '</span>';
            }
        })
        .catch(error => {
            console.error('Error fetching logs:', error);
            logContent.innerHTML = '<span style="color: #f87171;">Error fetching logs</span>';
        });
}
</script>